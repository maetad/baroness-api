// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	eventservice "github.com/maetad/baroness-api/internal/services/eventservice"
	mock "github.com/stretchr/testify/mock"
)

// EventServiceInterface is an autogenerated mock type for the EventServiceInterface type
type EventServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: r
func (_m *EventServiceInterface) Create(r eventservice.EventCreateRequest) (*eventservice.Event, error) {
	ret := _m.Called(r)

	var r0 *eventservice.Event
	if rf, ok := ret.Get(0).(func(eventservice.EventCreateRequest) *eventservice.Event); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventservice.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(eventservice.EventCreateRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: event
func (_m *EventServiceInterface) Delete(event *eventservice.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eventservice.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *EventServiceInterface) Get(id uint) (*eventservice.Event, error) {
	ret := _m.Called(id)

	var r0 *eventservice.Event
	if rf, ok := ret.Get(0).(func(uint) *eventservice.Event); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventservice.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *EventServiceInterface) List() ([]eventservice.Event, error) {
	ret := _m.Called()

	var r0 []eventservice.Event
	if rf, ok := ret.Get(0).(func() []eventservice.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]eventservice.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: event, r
func (_m *EventServiceInterface) Update(event *eventservice.Event, r eventservice.EventUpdateRequest) (*eventservice.Event, error) {
	ret := _m.Called(event, r)

	var r0 *eventservice.Event
	if rf, ok := ret.Get(0).(func(*eventservice.Event, eventservice.EventUpdateRequest) *eventservice.Event); ok {
		r0 = rf(event, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventservice.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventservice.Event, eventservice.EventUpdateRequest) error); ok {
		r1 = rf(event, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventServiceInterface creates a new instance of EventServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventServiceInterface(t mockConstructorTestingTNewEventServiceInterface) *EventServiceInterface {
	mock := &EventServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
