// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/maetad/baroness-api/internal/model"
	transitionservice "github.com/maetad/baroness-api/internal/services/transitionservice"
	mock "github.com/stretchr/testify/mock"
)

// TransitionServiceInterface is an autogenerated mock type for the TransitionServiceInterface type
type TransitionServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: r, creator
func (_m *TransitionServiceInterface) Create(r transitionservice.TransitionCreateRequest, creator *model.User) (*model.Transition, error) {
	ret := _m.Called(r, creator)

	var r0 *model.Transition
	if rf, ok := ret.Get(0).(func(transitionservice.TransitionCreateRequest, *model.User) *model.Transition); ok {
		r0 = rf(r, creator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transitionservice.TransitionCreateRequest, *model.User) error); ok {
		r1 = rf(r, creator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: transition, deletor
func (_m *TransitionServiceInterface) Delete(transition *model.Transition, deletor *model.User) error {
	ret := _m.Called(transition, deletor)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Transition, *model.User) error); ok {
		r0 = rf(transition, deletor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *TransitionServiceInterface) Get(id uint) (*model.Transition, error) {
	ret := _m.Called(id)

	var r0 *model.Transition
	if rf, ok := ret.Get(0).(func(uint) *model.Transition); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: workflowID
func (_m *TransitionServiceInterface) List(workflowID uint) ([]model.Transition, error) {
	ret := _m.Called(workflowID)

	var r0 []model.Transition
	if rf, ok := ret.Get(0).(func(uint) []model.Transition); ok {
		r0 = rf(workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transition, r, updator
func (_m *TransitionServiceInterface) Update(transition *model.Transition, r transitionservice.TransitionUpdateRequest, updator *model.User) (*model.Transition, error) {
	ret := _m.Called(transition, r, updator)

	var r0 *model.Transition
	if rf, ok := ret.Get(0).(func(*model.Transition, transitionservice.TransitionUpdateRequest, *model.User) *model.Transition); ok {
		r0 = rf(transition, r, updator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Transition, transitionservice.TransitionUpdateRequest, *model.User) error); ok {
		r1 = rf(transition, r, updator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransitionServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransitionServiceInterface creates a new instance of TransitionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransitionServiceInterface(t mockConstructorTestingTNewTransitionServiceInterface) *TransitionServiceInterface {
	mock := &TransitionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
