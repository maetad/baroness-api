// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/maetad/baroness-api/internal/model"
	workflowservice "github.com/maetad/baroness-api/internal/services/workflowservice"
	mock "github.com/stretchr/testify/mock"
)

// WorkflowServiceInterface is an autogenerated mock type for the WorkflowServiceInterface type
type WorkflowServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: r, creator
func (_m *WorkflowServiceInterface) Create(r workflowservice.WorkflowCreateRequest, creator *model.User) (*model.Workflow, error) {
	ret := _m.Called(r, creator)

	var r0 *model.Workflow
	if rf, ok := ret.Get(0).(func(workflowservice.WorkflowCreateRequest, *model.User) *model.Workflow); ok {
		r0 = rf(r, creator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(workflowservice.WorkflowCreateRequest, *model.User) error); ok {
		r1 = rf(r, creator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: workflow, deletor
func (_m *WorkflowServiceInterface) Delete(workflow *model.Workflow, deletor *model.User) error {
	ret := _m.Called(workflow, deletor)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Workflow, *model.User) error); ok {
		r0 = rf(workflow, deletor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *WorkflowServiceInterface) Get(id uint) (*model.Workflow, error) {
	ret := _m.Called(id)

	var r0 *model.Workflow
	if rf, ok := ret.Get(0).(func(uint) *model.Workflow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: eventID
func (_m *WorkflowServiceInterface) List(eventID uint) ([]model.Workflow, error) {
	ret := _m.Called(eventID)

	var r0 []model.Workflow
	if rf, ok := ret.Get(0).(func(uint) []model.Workflow); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: workflow, r, updator
func (_m *WorkflowServiceInterface) Update(workflow *model.Workflow, r workflowservice.WorkflowUpdateRequest, updator *model.User) (*model.Workflow, error) {
	ret := _m.Called(workflow, r, updator)

	var r0 *model.Workflow
	if rf, ok := ret.Get(0).(func(*model.Workflow, workflowservice.WorkflowUpdateRequest, *model.User) *model.Workflow); ok {
		r0 = rf(workflow, r, updator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Workflow, workflowservice.WorkflowUpdateRequest, *model.User) error); ok {
		r1 = rf(workflow, r, updator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWorkflowServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewWorkflowServiceInterface creates a new instance of WorkflowServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWorkflowServiceInterface(t mockConstructorTestingTNewWorkflowServiceInterface) *WorkflowServiceInterface {
	mock := &WorkflowServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
